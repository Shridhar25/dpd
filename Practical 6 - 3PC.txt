Client:

import java.rmi.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class MyRMIClient {
    public static void main(String args[]) {
        int n = 0;
        try (Scanner scanner = new Scanner(System.in)) {
            try {
                MyRMIInterface obj = (MyRMIInterface) Naming.lookup("rmi://localhost:3000/a");
                String prepare1 = obj.prepare1();
                System.out.println(prepare1 + " received from server");
                String message = "";
                System.out.println("0 is abort and 1 is ready");
                n = scanner.nextInt();
                if (n == 1) {
                    obj.sendreadyp1();
                } else {
                    obj.sendabortp1();
                }

                TimeUnit.SECONDS.sleep(6);

                String check = obj.checkp1();
                if (check.equals("ready")) {
                    String prepare2 = obj.prepare2();
                    System.out.println(prepare2 + " received from server");
                    System.out.println("ACK sent to server");
                    obj.ack();

                    TimeUnit.SECONDS.sleep(2);

                    String check2 = obj.checkp2();
                    if (check2.equals("commit")) {
                        System.out.println("Received Commit");
                        System.out.println("commited");
                    } else {
                        message = obj.abort();
                        System.out.println(message + " received from server");
                        System.out.println("Aborting Tx");
                        obj.exit();
                        System.exit(0);

                    }

                } else {
                    message = obj.abort();
                    System.out.println(message + " received from server");
                    System.out.println("Aborting Tx");
                    System.exit(0);
                }

            } catch (Exception ex) {
                System.out.println("Error " + ex);
            }
        }
    }
}


Interface:

import java.rmi.*;

public interface MyRMIInterface extends Remote {
    public String prepare1() throws RemoteException;

    public String prepare2() throws RemoteException;

    public String checkp1() throws RemoteException;

    public String checkp2() throws RemoteException, InterruptedException;

    public void sendreadyp1() throws RemoteException;

    public void sendabortp1() throws RemoteException;

    public String abort() throws RemoteException;

    public void ack() throws RemoteException;

    public void exit() throws RemoteException;
}

Server:

import java.rmi.*;
import java.rmi.registry.LocateRegistry;
import java.rmi.server.*;
import java.util.concurrent.TimeUnit;

public class MyRMIServerImpl extends UnicastRemoteObject implements MyRMIInterface {

    int count = 0;
    int ack = 0;
    boolean countb = false;
    boolean ackb = false;
    int exit = 0;

    public MyRMIServerImpl() throws RemoteException {
        System.out.println("Creating server Object ...");
    }

    // define remote methods for clients
    public String prepare1() throws RemoteException {
        String prepare = "Commit Request";
        return (prepare);
    }

    public String prepare2() throws RemoteException {
        String prepare = "Prepare";
        return (prepare);
    }

    public String checkp1() throws RemoteException {
        String x = "";
        if (count == 2) {
            x = "ready";
            if (countb == false) {
                System.out.println();
                System.out.println("P2");
                System.out.println("------------------------");
                System.out.println("sending prepare message to clients");
            }
            countb = true;
        } else {
            x = "abort";
        }
        return x;
    }

    public String checkp2() throws RemoteException, InterruptedException {
        String x = "";
        if (ack == 2) {
            x = "commit";
            if (ackb == false) {
                System.out.println();
                System.out.println("P3");
                System.out.println("------------------------");
                System.out.println("sending commit message to clients");
                exit = 1;
                System.out.println("Tx committed");
            }
            // if (exit == 1) {
            // TimeUnit.SECONDS.sleep(5);
            // System.exit(0);
            // }
            ackb = true;
        } else {
            x = "abort";
        }
        return x;
    }

    public void sendreadyp1() throws RemoteException {
        count += 1;
        System.out.println(count + " ready received");
    }

    public void sendabortp1() throws RemoteException {
        count = 0;
    }

    public String abort() throws RemoteException {
        System.out.println("abort received");
        return "abort";
    }

    public void exit() throws RemoteException {
        System.exit(0);
    }

    public void ack() throws RemoteException {
        ack += 1;
        System.out.println(ack + " ack received");
    }

    public static void main(String args[]) {
        try {
            MyRMIServerImpl myserver = new MyRMIServerImpl();
            LocateRegistry.createRegistry(3000);
            Naming.rebind("rmi://localhost:3000/a", myserver);
            System.out.println("P1");
            System.out.println("------------------------");
            System.out.println("Server Ready... \nsending C_R message to clients");

        } catch (Exception ex) {
            System.out.println("Error " + ex);
        }
    }
}